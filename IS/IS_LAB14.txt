a)
function I(x: nat, y: nat): int {
  if x == 0 || y == 0 then 12
  else if x % 2 == y % 2 then
    I(x - 1, y)
  else
    I(x, y - 1)
}
#La fiecare apel recursiv, x scade cu 1.
Deoarece x este un număr întreg, va fi în cele din urmă mai mic decât 10.
Prin urmare, clauza decreases x funcționează deoarece x scade strict și este limitat.

b)
function G(x: int): int {
  if 0 <= x then G(x - 2) else x
}

#La fiecare apel recursiv, x scade cu 2.
Deoarece x este un număr întreg, va fi în cele din urmă mai mic decât 0 dacă pornim de la un x nenegativ.
Clauza decreases x funcționează deoarece x scade strict și va deveni în cele din urmă negativ, terminând recursivitatea.

c)
function H(x: int): int {
  if x < -60 then x else H(x - 1)
}

#La fiecare apel recursiv, x scade cu 1.
Deoarece x este un număr întreg, va fi în cele din urmă mai mic decât -60.
Clauza decreases x funcționează deoarece x scade strict și va deveni în cele din urmă mai mic decât -60, terminând recursivitatea.

d)
function I(x: nat, y: nat): int {
  if x == 0 || y == 0 then 12
  else if x % 2 == y % 2 then
    I(x - 1, y)
  else
    I(x, y - 1)
}
#În primul caz recursiv, x scade cu 1 și y rămâne același.
În al doilea caz recursiv, y scade cu 1 și x rămâne același.
Folosind tuplul (x, y), Dafny poate determina că cel puțin una dintre componente scade strict la fiecare apel recursiv.
Clauza decreases (x, y) funcționează deoarece fie x, fie y scade strict.

e)
function J(x: nat, y: nat): int {
  if x == 0 then y
  else if y == 0 then
    J(x - 1, 3)
  else
    J(x, y - 1)
}
#În al doilea caz recursiv, x scade cu 1 și y este resetat la 3.
În al treilea caz recursiv, y scade cu 1.
Folosind tuplul (x, y), Dafny poate determina că cel puțin una dintre componente scade strict la fiecare apel recursiv.
Clauza decreases (x, y) funcționează deoarece x scade strict când y este zero și y scade în celelalte cazuri.

f)
function K(x: nat, y: nat, z: nat): int {
  if x < 10 || y < 5 then x + y
  else if z == 0 then
    K(x - 1, y, 5)
  else
    K(x, y - 1, z - 1)
}
#În al doilea caz recursiv, x scade cu 1 și z este resetat la 5.
În al treilea caz recursiv, y scade cu 1 și z scade cu 1.
Folosind tuplul (x, y, z), Dafny poate determina că cel puțin una dintre componente scade strict la fiecare apel recursiv.
Clauza decreases (x, y, z) funcționează deoarece cel puțin una dintre componente scade strict la fiecare apel recursiv.

g)
function L(x: int): int {
  if x < 100 then L(x + 1) + 10 else x
}
#La fiecare apel recursiv, x crește cu 1.
Expresia 100 - x scade cu 1 la fiecare apel recursiv.
Când x ajunge la 100, 100 - x devine 0 și funcția se oprește.
Aceasta funcționează deoarece 100 - x scade strict la fiecare apel recursiv.

CONCLUZIE:
(a), (b), (d), (e), și (f): Funcționează corect cu clauza implicită decreases.
c)decreases x: Nu funcționează.
decreases 61+x :Funcționează.
(g):
decreases x: Nu funcționează.
decreases 100 - x sau decreases -x: Funcționează.
